import { useState, useEffect } from 'react';

const Profile = () => {
  const [compressedBlob, setCompressedBlob] = useState(null);
  // const [compressedPreview, setCompressedPreview] = useState(null);

  const [isUploading, setIsUploading] = useState(false);

  const [showRequests, setShowRequests] = useState(false);
  const [showMeetings, setShowMeetings] = useState(false);
  const [showAcceptedMeetings, setShowAcceptedMeetings] = useState(false);

  const [myGroupMeetings, setMyGroupMeetings] = useState([]);

  const [statusMessage, setStatusMessage] = useState('none');

  const [showEdit, setShowEdit] = useState(false);
  const [editableProfile, setEditableProfile] = useState(null);

  const tginit = window.Telegram?.WebApp?.initDataUnsafe?.user?.id

  const [profile, setProfile] = useState(null);

  const incomingRequests = [
    {
      telegramId: 1,
      gender: '–ñ–µ–Ω—â–∏–Ω–∞',
      age: 25,
      city: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
      photos: [
        'https://randomuser.me/api/portraits/women/65.jpg',
        'https://randomuser.me/api/portraits/women/65.jpg',
        'https://randomuser.me/api/portraits/women/65.jpg',
      ],
    },
    {
      telegramId: 2,
      gender: '–ú—É–∂—á–∏–Ω–∞',
      age: 30,
      city: '–ë—É—Ö–∞—Ä–∞',
      photos: [
        'https://randomuser.me/api/portraits/men/44.jpg',
        'https://randomuser.me/api/portraits/men/44.jpg',
        'https://randomuser.me/api/portraits/men/44.jpg',
      ],
    },
  ];

  const [myMeetings, setMyMeetings] = useState([]);
  const [myAcceptedMeetings, setMyAcceptedMeetings] = useState([]);

  useEffect(() => {
    const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
    if (!telegramId) return;

    const fetchAll = async () => {
      try {
        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profileRes = await fetch('https://dating-in-tg.com/auth', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ telegramId }),
        });

        if (!profileRes.ok) {
          setStatusMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
          return;
        }

        const profileData = await profileRes.json();
        setProfile(profileData.user);
        setStatusMessage(profileData.status === '–¥–æ–±–∞–≤–ª–µ–Ω' ? 'üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω' : 'üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const meetingsRes = await fetch('https://dating-in-tg.com/single/myCreatedMeets', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ telegramId }),
        });

        const meetingsData = await meetingsRes.json();
        setMyMeetings(meetingsData.meetings || []);

        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const groupMeetingsRes = await fetch('https://dating-in-tg.com/many/mine', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ telegramId }),
        });
        const groupMeetingsData = await groupMeetingsRes.json();
        setMyGroupMeetings(groupMeetingsData.meetings || []);

        // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç
        const acceptedRes = await fetch('https://dating-in-tg.com/single/myAcceptedMeets', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ telegramId }),
        });
        const acceptedData = await acceptedRes.json();
        setMyAcceptedMeetings(acceptedData.meetings || []);

      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', err);
        setStatusMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      }
    };

    fetchAll();
  }, []);

  const handleRemovePhoto = async (urlToRemove) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ?')) return;

    const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
    if (!telegramId) {
      alert('‚ùå –ù–µ—Ç Telegram ID');
      return;
    }

    // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫ –±–µ–∑ —É–¥–∞–ª—è–µ–º–æ–π
    const newPhotos = (profile?.photos || []).filter(p => p !== urlToRemove);

    try {
      const res = await fetch('https://dating-in-tg.com/profileEdit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ telegramId, photos: newPhotos }),
      });

      const data = await res.json();
      if (data.error) {
        alert(data.error);
        return;
      }

      // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      setProfile(data.user);
      alert('‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', err);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  };

  const handleAcceptCandidate = async (meetId, telegramId) => {
    const res = await fetch('https://dating-in-tg.com/single/accept', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ meetId, telegramId }),
    });
    const data = await res.json();

    if (data.status === '‚úÖ –ü—Ä–∏–Ω—è—Ç') {
      setMyMeetings((prev) =>
        prev.map((m) =>
          m._id === meetId
            ? {
              ...m,
              candidateProfiles: m.candidateProfiles.map((c) =>
                c.telegramId === telegramId
                  ? { ...c, status: 'accepted' }
                  : { ...c, status: 'rejected' }
              ),
            }
            : m
        )
      );
    } else {
      alert(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏');
    }
  };

  const handleRejectCandidate = async (meetId, telegramId) => {
    const res = await fetch('https://dating-in-tg.com/single/reject', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ meetId, telegramId }),
    });
    const data = await res.json();

    if (data.status === '‚úÖ –û—Ç–∫–ª–æ–Ω—ë–Ω') {
      setMyMeetings((prev) =>
        prev.map((m) =>
          m._id === meetId
            ? {
              ...m,
              candidateProfiles: m.candidateProfiles.map((c) =>
                c.telegramId === telegramId
                  ? { ...c, status: 'rejected' }
                  : c
              ),
            }
            : m
        )
      );
    } else {
      alert(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
    }
  };

  return (
    <div style={styles.container}>
      <h2 style={styles.heading}>–ü—Ä–æ—Ñ–∏–ª—å</h2>

      <div style={styles.sectionCard}>
        {statusMessage && (
          <div style={{ color: '#666', fontSize: 14, textAlign: 'center', marginBottom: 10 }}>
            {statusMessage}
          </div>
        )}
        <ProfileLine label="–ò–º—è" value={profile?.name ? profile?.name : '-'} />
        <ProfileLine label="–ü–æ–ª" value={profile?.gender == 'male' ? '–ü–∞—Ä–µ–Ω—å' : profile?.gender == 'female' ? '–î–µ–≤—É—à–∫–∞' : '-'} />
        <ProfileLine label="–í–æ–∑—Ä–∞—Å—Ç" value={`${profile?.age ? profile?.age : '-'}`} />
        <ProfileLine label="–†–æ—Å—Ç" value={`${profile?.height ? profile?.height : '-'} —Å–º`} />
        <ProfileLine label="–í–µ—Å" value={`${profile?.weight ? profile?.weight : '-'} –∫–≥`} />
        <ProfileLine label="–ì–æ—Ä–æ–¥" value={`${profile?.city ? profile?.city : '-'}`} />
        <ProfileLine label="Tg ID" value={tginit} />

        {/* <button
          onClick={async () => {
            const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
            const message = `üëã –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –≤ TG Meets.${userId}`

            await fetch('https://dating-in-tg.com/log', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ userId: 6820478433, message }),
            });
          }}
          style={styles.editBtn}>–¢–ï–°–¢</button> */}
        <button
          onClick={() => {
            setEditableProfile({ ...profile });
            setShowEdit(true);
          }}
          style={{ ...styles.editBtn, backgroundColor: '#1976d2' }}
        >
          –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨
        </button>
      </div>

      <div style={styles.section}>
        <div style={styles.subheading}>–§–æ—Ç–æ</div>
        <div style={styles.photoRow}>
          {profile?.photos?.map((photo, i) => (
            <div key={i} style={styles.photoBox} onClick={() => handleRemovePhoto(photo)}>
              {photo ? (
                <img src={photo} alt={`–§–æ—Ç–æ ${i + 1}`} style={styles.photo} />
              ) : (
                <div style={styles.photoPlaceholder}>+</div>
              )}
            </div>
          ))}

          {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ */}
          <div style={styles.photoBox}>
            <button
              onClick={() => document.getElementById('photoUploadInput').click()}
              style={{
                width: '100%',
                height: '100%',
                border: '1px dashed #aaa',
                borderRadius: 8,
                fontSize: 24,
                background: 'transparent',
                cursor: isUploading ? 'default' : 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}
              disabled={isUploading}
            >
              {isUploading ? (
                <div
                  style={{
                    width: 24,
                    height: 24,
                    border: '3px solid #ccc',
                    borderTop: '3px solid #1976d2',
                    borderRadius: '50%',
                    animation: 'spin 1s linear infinite'
                  }}
                />
              ) : (
                '+'
              )}
            </button>

            <input
              id="photoUploadInput"
              type="file"
              accept="image/*"
              style={{ display: 'none' }}
              onChange={async (e) => {
                const file = e.target.files?.[0];
                if (!file) return;

                // ‚ú® 1. –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —É–∂–µ —Ñ–æ—Ç–æ —É —é–∑–µ—Ä–∞
                const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
                if (!telegramId) {
                  alert('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Telegram ID');
                  return;
                }

                try {
                  const profileRes = await fetch('https://dating-in-tg.com/auth', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ telegramId }),
                  });
                  const profileData = await profileRes.json();

                  const currentPhotos = (profileData.user?.photos || []).filter(p => !!p);
                  if (currentPhotos.length >= 3) {
                    alert('‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 3 —Ñ–æ—Ç–æ');
                    return; // üëâ —Å—Ç–æ–ø–∞–µ–º, –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
                  }
                } catch (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ç–æ:', err);
                  alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
                  return;
                }

                // ‚ú® 2. –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∂–∞—Ç–∏–µ–º
                const reader = new FileReader();
                reader.onload = (event) => {
                  const img = new Image();
                  img.onload = async () => {
                    const canvas = document.createElement('canvas');
                    const maxWidth = 800;
                    const scale = Math.min(maxWidth / img.width, 1);
                    canvas.width = img.width * scale;
                    canvas.height = img.height * scale;

                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

                    canvas.toBlob(async (blob) => {
                      if (!blob) {
                        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                        return;
                      }

                      try {
                        setIsUploading(true);
                        const formData = new FormData();
                        formData.append('photo', blob, 'compressed.jpg');

                        const res = await fetch('https://dating-in-tg.com/uploadPhoto', {
                          method: 'POST',
                          body: formData,
                        });
                        const data = await res.json();

                        if (data.error) {
                          alert(data.error);
                          setIsUploading(false);
                          return;
                        }

                        if (data.url) {
                          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3:', data.url);

                          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                          const newPhotos = [...(profile?.photos || [])];
                          const firstEmptyIndex = newPhotos.findIndex(p => !p);
                          if (firstEmptyIndex >= 0) {
                            newPhotos[firstEmptyIndex] = data.url;
                          } else {
                            newPhotos.push(data.url);
                          }

                          const saveRes = await fetch('https://dating-in-tg.com/profileEdit', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ telegramId, photos: newPhotos }),
                          });
                          const saveData = await saveRes.json();

                          if (saveData.error) {
                            alert(saveData.error);
                            setIsUploading(false);
                            return;
                          }

                          setProfile(saveData.user);
                          alert(saveData.status || '‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
                        }
                      } catch (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', err);
                        alert('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                      } finally {
                        setIsUploading(false);
                      }
                    }, 'image/jpeg', 0.5);
                  };
                  img.src = event.target.result;
                };
                reader.readAsDataURL(file);
              }}
            />

          </div>

        </div>

      </div>

      <div style={styles.section}>

      </div>

      <div style={styles.section}>
        <div
          style={styles.toggleRow}
          onClick={() => setShowMeetings(!showMeetings)}
        >
          <span>–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ 1-1</span>
          <span
            style={{ transform: showMeetings ? 'rotate(90deg)' : 'none' }}
          >
            ‚ñ∂
          </span>
        </div>

        {showMeetings &&
          myMeetings.map((m) => (
            <div key={m._id} style={styles.meetingCard}>
              <div style={styles.meetingContent}>
                <div style={styles.meetingText}>
                  <div style={styles.meetingType}>üí¨ –§–æ—Ä–º–∞—Ç: 1-–Ω–∞-1</div>
                  <div style={styles.meetingInfo}>üïí {new Date(m.time).toLocaleString()}</div>
                  <div style={styles.meetingInfo}>üìç {m.location}</div>
                  <div style={styles.meetingInfo}>
                    üîç –ò—â–µ—Ç: {m.gender === 'male' ? '–ú—É–∂—á–∏–Ω—É' : m.gender === 'female' ? '–ñ–µ–Ω—â–∏–Ω—É' : '–ö–æ–≥–æ —É–≥–æ–¥–Ω–æ'}
                  </div>
                </div>
                <button
                  onClick={async () => {
                    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É?')) return;

                    const res = await fetch('https://dating-in-tg.com/single/delete', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ meetingId: m._id }),
                    });

                    const data = await res.json();
                    if (data.status === '‚úÖ –£–¥–∞–ª–µ–Ω–æ') {
                      setMyMeetings((prev) => prev.filter((item) => item._id !== m._id));
                    } else {
                      alert(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                    }
                  }}
                  style={styles.deleteBtn}
                >
                  üóë –£–¥–∞–ª–∏—Ç—å
                </button>

              </div>
              {m.candidateProfiles?.length > 0 && (
                <div style={{ marginTop: 12 }}>
                  <div style={{ fontWeight: 'bold', marginBottom: 8 }}>–ó–∞—è–≤–∫–∏:</div>
                  {m.candidateProfiles.map((cand) => (
                    <div key={cand.telegramId} style={styles.requestCard}>
                      <div style={styles.profileLine}>
                        <strong>{cand.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</strong> ‚Äî {cand.age} –ª–µ—Ç, {cand.city}, {cand.gender}
                      </div>
                      <div style={styles.profileLine}>
                        –°—Ç–∞—Ç—É—Å:{' '}
                        <strong>
                          {{
                            pending: '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                            accepted: '‚úÖ –ü—Ä–∏–Ω—è—Ç',
                            rejected: '‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω',
                          }[cand.status] || '‚ùì'}
                        </strong>
                      </div>
                      <div style={styles.photoRow}>
                        {cand.photos?.map((url, i) => (
                          <div key={i} style={styles.photoBox}>
                            <img src={url} alt="–§–æ—Ç–æ" style={styles.photo} />
                          </div>
                        ))}
                      </div>
                      {cand.status === 'pending' && (
                        <div style={styles.buttonRow}>
                          <button
                            style={styles.acceptBtn}
                            onClick={() => handleAcceptCandidate(m._id, cand.telegramId)}
                          >
                            –ü—Ä–∏–Ω—è—Ç—å
                          </button>
                          <button
                            style={styles.rejectBtn}
                            onClick={() => handleRejectCandidate(m._id, cand.telegramId)}
                          >
                            –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}


        {/* {showEdit && editableProfile && (
          <div style={modalStyles.backdrop}>
            <div style={modalStyles.modal}>
              <h3 style={modalStyles.title}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h3>

              {['name', 'gender', 'age', 'height', 'weight', 'city'].map((field) => (
                <div key={field} style={modalStyles.inputBlock}>
                  <label style={modalStyles.label}>
                    {{
                      name: '–ò–º—è',
                      gender: '–ü–æ–ª',
                      age: '–í–æ–∑—Ä–∞—Å—Ç',
                      height: '–†–æ—Å—Ç',
                      weight: '–í–µ—Å',
                      city: '–ì–æ—Ä–æ–¥',
                    }[field]}
                  </label>
                  <input
                    type={['age', 'height', 'weight'].includes(field) ? 'number' : 'text'}
                    value={editableProfile[field] || ''}
                    onChange={(e) =>
                      setEditableProfile((prev) => ({ ...prev, [field]: e.target.value }))
                    }
                    style={modalStyles.input}
                  />
                </div>
              ))}

              <div style={modalStyles.buttonRow}>
                <button
                  onClick={() => setShowEdit(false)}
                  style={modalStyles.cancelBtn}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={async () => {
                    const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
                    if (!telegramId) return;

                    const res = await fetch('https://dating-in-tg.com/profileEdit', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ telegramId, ...editableProfile }),
                    });

                    if (res.ok) {
                      const data = await res.json();
                      setStatusMessage('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
                      setShowEdit(false);
                      setProfile(data.user); // üîÑ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    } else {
                      setStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                    }
                  }}
                  style={modalStyles.saveBtn}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )} */}
        {showEdit && editableProfile && (
          <div style={modalStyles.backdrop}>
            <div style={modalStyles.modal}>
              <h3 style={modalStyles.title}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</h3>

              {/* –ò–º—è */}
              <div style={modalStyles.inputBlock}>
                <label style={modalStyles.label}>–ò–º—è</label>
                <input
                  type="text"
                  value={editableProfile.name || ''}
                  onChange={(e) =>
                    setEditableProfile((prev) => ({ ...prev, name: e.target.value }))
                  }
                  style={modalStyles.input}
                />
              </div>

              {/* –ü–æ–ª */}
              <div style={modalStyles.inputBlock}>
                <label style={modalStyles.label}>–ü–æ–ª</label>
                <select
                  value={editableProfile.gender || ''}
                  onChange={(e) =>
                    setEditableProfile((prev) => ({ ...prev, gender: e.target.value }))
                  }
                  style={modalStyles.input}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                  <option value="male">–ü–∞—Ä–µ–Ω—å</option>
                  <option value="female">–î–µ–≤—É—à–∫–∞</option>
                </select>
              </div>

              {/* –í–æ–∑—Ä–∞—Å—Ç */}
              <div style={modalStyles.inputBlock}>
                <label style={modalStyles.label}>
                  –í–æ–∑—Ä–∞—Å—Ç: {editableProfile.age || 18} –ª–µ—Ç
                </label>
                <input
                  type="range"
                  min="18"
                  max="99"
                  value={editableProfile.age || 18}
                  onChange={(e) =>
                    setEditableProfile((prev) => ({ ...prev, age: Number(e.target.value) }))
                  }
                  style={{ width: '100%' }}
                />
              </div>

              {/* –†–æ—Å—Ç */}
              <div style={modalStyles.inputBlock}>
                <label style={modalStyles.label}>
                  –†–æ—Å—Ç: {editableProfile.height || 170} —Å–º
                </label>
                <input
                  type="range"
                  min="120"
                  max="220"
                  value={editableProfile.height || 170}
                  onChange={(e) =>
                    setEditableProfile((prev) => ({ ...prev, height: Number(e.target.value) }))
                  }
                  style={{ width: '100%' }}
                />
              </div>

              {/* –í–µ—Å */}
              <div style={modalStyles.inputBlock}>
                <label style={modalStyles.label}>
                  –í–µ—Å: {editableProfile.weight || 60} –∫–≥
                </label>
                <input
                  type="range"
                  min="30"
                  max="200"
                  value={editableProfile.weight || 60}
                  onChange={(e) =>
                    setEditableProfile((prev) => ({ ...prev, weight: Number(e.target.value) }))
                  }
                  style={{ width: '100%' }}
                />
              </div>

              {/* –ì–æ—Ä–æ–¥ */}
              <div style={modalStyles.inputBlock}>
                <label style={modalStyles.label}>–ì–æ—Ä–æ–¥</label>
                <select
                  value={editableProfile.city || ''}
                  onChange={(e) =>
                    setEditableProfile((prev) => ({ ...prev, city: e.target.value }))
                  }
                  style={modalStyles.input}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
                  <option value="–¢–∞—à–∫–µ–Ω—Ç">–¢–∞—à–∫–µ–Ω—Ç</option>
                  {/* üëâ –∑–¥–µ—Å—å –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ */}
                </select>
              </div>

              <div style={modalStyles.buttonRow}>
                <button
                  onClick={() => setShowEdit(false)}
                  style={modalStyles.cancelBtn}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={async () => {
                    const telegramId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id;
                    if (!telegramId) return;

                    const res = await fetch('https://dating-in-tg.com/profileEdit', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ telegramId, ...editableProfile }),
                    });

                    if (res.ok) {
                      const data = await res.json();
                      setStatusMessage('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω');
                      setShowEdit(false);
                      setProfile(data.user);
                    } else {
                      setStatusMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                    }
                  }}
                  style={modalStyles.saveBtn}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}


        <div style={styles.section}>
          <div
            style={styles.toggleRow}
            onClick={() => setShowRequests(!showRequests)}
          >
            <span>–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏</span>
            <span style={{ transform: showRequests ? 'rotate(90deg)' : 'none' }}>‚ñ∂</span>
          </div>

          {showRequests &&
            myGroupMeetings.map((m) => (
              <div key={m._id} style={styles.meetingCard}>
                <div style={styles.meetingContent}>
                  <div style={styles.meetingText}>
                    <div style={styles.meetingType}>üë• –§–æ—Ä–º–∞—Ç: –≥—Ä—É–ø–ø–æ–≤–∞—è</div>
                    <div style={styles.meetingInfo}>üïí {new Date(m.time).toLocaleString()}</div>
                    <div style={styles.meetingInfo}>üìç {m.location}</div>
                    <div style={styles.meetingInfo}>
                      üîç –ò—â–µ—Ç: {m.gender === 'male' ? '–ú—É–∂—á–∏–Ω' : m.gender === 'female' ? '–ñ–µ–Ω—â–∏–Ω' : '–ö–æ–≥–æ —É–≥–æ–¥–Ω–æ'}
                    </div>
                    <div style={styles.meetingInfo}>üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –¥–æ {m.maxParticipants}</div>
                  </div>
                  <button
                    onClick={async () => {
                      if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É?')) return;

                      const res = await fetch('https://dating-in-tg.com/many/delete', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ meetingId: m._id }),
                      });

                      const data = await res.json();
                      if (data.status === '‚úÖ –£–¥–∞–ª–µ–Ω–æ') {
                        setMyGroupMeetings((prev) => prev.filter((item) => item._id !== m._id));
                      } else {
                        alert(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
                      }
                    }}
                    style={styles.deleteBtn}
                  >
                    üóë –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>

                {m.candidateProfiles?.length > 0 && (
                  <div style={{ marginTop: 12 }}>
                    <div style={{ fontWeight: 'bold', marginBottom: 8 }}>–ó–∞—è–≤–∫–∏:</div>
                    {m.candidateProfiles.map((cand) => (
                      <div key={cand.telegramId} style={styles.requestCard}>
                        <div style={styles.profileLine}>
                          <strong>{cand.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</strong> ‚Äî {cand.age} –ª–µ—Ç, {cand.city}
                        </div>
                        <div style={styles.profileLine}>
                          –°—Ç–∞—Ç—É—Å:{' '}
                          <strong>
                            {{
                              pending: '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
                              accepted: '‚úÖ –ü—Ä–∏–Ω—è—Ç',
                              rejected: '‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω',
                            }[cand.status] || '‚ùì'}
                          </strong>
                        </div>
                        <div style={styles.photoRow}>
                          {cand.photos?.map((url, i) => (
                            <div key={i} style={styles.photoBox}>
                              <img src={url} alt="–§–æ—Ç–æ" style={styles.photo} />
                            </div>
                          ))}
                        </div>
                        {cand.status === 'pending' && (
                          <div style={styles.buttonRow}>
                            <button
                              style={styles.acceptBtn}
                              onClick={async () => {
                                const res = await fetch('https://dating-in-tg.com/many/accept', {
                                  method: 'POST',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({ meetId: m._id, telegramId: cand.telegramId }),
                                });
                                const data = await res.json();
                                if (data.status === '‚úÖ –ü—Ä–∏–Ω—è—Ç') {
                                  setMyGroupMeetings((prev) =>
                                    prev.map((mm) =>
                                      mm._id === m._id
                                        ? {
                                          ...mm,
                                          candidateProfiles: mm.candidateProfiles.map((c) =>
                                            c.telegramId === cand.telegramId
                                              ? { ...c, status: 'accepted' }
                                              : c
                                          ),
                                        }
                                        : mm
                                    )
                                  );
                                } else alert(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏');
                              }}
                            >
                              –ü—Ä–∏–Ω—è—Ç—å
                            </button>
                            <button
                              style={styles.rejectBtn}
                              onClick={async () => {
                                const res = await fetch('https://dating-in-tg.com/many/reject', {
                                  method: 'POST',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({ meetId: m._id, telegramId: cand.telegramId }),
                                });
                                const data = await res.json();
                                if (data.status === '‚úÖ –û—Ç–∫–ª–æ–Ω—ë–Ω') {
                                  setMyGroupMeetings((prev) =>
                                    prev.map((mm) =>
                                      mm._id === m._id
                                        ? {
                                          ...mm,
                                          candidateProfiles: mm.candidateProfiles.map((c) =>
                                            c.telegramId === cand.telegramId
                                              ? { ...c, status: 'rejected' }
                                              : c
                                          ),
                                        }
                                        : mm
                                    )
                                  );
                                } else alert(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
                              }}
                            >
                              –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                            </button>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
        </div>

        <div style={styles.section}>
          <div
            style={styles.toggleRow}
            onClick={() => setShowAcceptedMeetings(!showAcceptedMeetings)}
          >
            <span>–í—Å—Ç—Ä–µ—á–∏, –≥–¥–µ –≤—ã –ø—Ä–∏–Ω—è—Ç—ã</span>
            <span style={{ transform: showAcceptedMeetings ? 'rotate(90deg)' : 'none' }}>‚ñ∂</span>
          </div>

          {showAcceptedMeetings &&
            myAcceptedMeetings.map((m) => (
              <div key={m._id} style={styles.meetingCard}>
                <div style={styles.meetingContent}>
                  <div style={styles.meetingText}>
                    <div style={styles.meetingType}>üí¨ –§–æ—Ä–º–∞—Ç: 1-–Ω–∞-1</div>
                    <div style={styles.meetingInfo}>üïí {new Date(m.time).toLocaleString()}</div>
                    <div style={styles.meetingInfo}>üìç {m.location}</div>
                    <div style={styles.meetingInfo}>
                      üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: <strong>{m.creatorProfile?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}</strong> ‚Äî{' '}
                      {m.creatorProfile?.age} –ª–µ—Ç, {m.creatorProfile?.gender}, {m.creatorProfile?.city}
                    </div>
                    <div style={styles.photoRow}>
                      {m.creatorProfile?.photos?.map((url, i) => (
                        <div key={i} style={styles.photoBox}>
                          {url ? <img src={url} alt="–§–æ—Ç–æ" style={styles.photo} /> : <div style={styles.photoPlaceholder}>+</div>}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            ))}
        </div>

      </div>
    </div>
  );
};

const ProfileLine = ({ label, value }) => (
  <div style={styles.profileLine}>
    <strong>{label}:</strong> <span style={{ marginLeft: 6 }}>{value}</span>
  </div>
);

const styles = {
  container: {
    padding: 16,
    paddingBottom: 80,
    minHeight: '100vh',
    fontFamily: 'system-ui, sans-serif',
    backgroundColor: '#fafafa',
  },
  heading: {
    fontSize: 22,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 16,
    color: '#222',
  },
  subheading: {
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 12,
    color: '#333',
  },
  section: {
    marginBottom: 28,
  },
  sectionCard: {
    marginBottom: 28,
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    boxShadow: '0 1px 3px rgba(0,0,0,0.05)',
  },
  toggleRow: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    fontWeight: 'bold',
    fontSize: 16,
    marginBottom: 16,
    cursor: 'pointer',
    color: '#333',
  },
  badge: {
    backgroundColor: '#e53935',
    color: 'white',
    borderRadius: 12,
    padding: '2px 8px',
    fontSize: 12,
    fontWeight: 'bold',
  },
  profileLine: {
    fontSize: 15,
    marginBottom: 10,
    color: '#333',
  },
  editBtn: {
    marginTop: 10,
    padding: 12,
    backgroundColor: '#4fc3f7',
    color: 'white',
    fontWeight: 'bold',
    fontSize: 15,
    width: '100%',
    border: 'none',
    borderRadius: 8,
    cursor: 'pointer',
    transition: 'background 0.2s ease',
  },
  photoRow: {
    display: 'flex',
    justifyContent: 'space-between',
    gap: 10,
  },
  photoBox: {
    width: '32%',
    aspectRatio: '1 / 1',
    backgroundColor: '#eee',
    borderRadius: 10,
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
  },
  photoPlaceholder: {
    fontSize: 32,
    color: '#bbb',
  },
  photo: {
    width: '100%',
    height: '100%',
    objectFit: 'cover',
  },
  requestCard: {
    backgroundColor: '#fff',
    padding: 14,
    borderRadius: 12,
    marginBottom: 16,
    boxShadow: '0 1px 3px rgba(0,0,0,0.05)',
  },
  buttonRow: {
    display: 'flex',
    gap: 10,
    marginTop: 12,
  },
  acceptBtn: {
    flex: 1,
    padding: 10,
    backgroundColor: '#4caf50',
    color: 'white',
    border: 'none',
    borderRadius: 8,
    fontWeight: 'bold',
  },
  rejectBtn: {
    flex: 1,
    padding: 10,
    backgroundColor: '#e53935',
    color: 'white',
    border: 'none',
    borderRadius: 8,
    fontWeight: 'bold',
  },
  meetingCard: {
    backgroundColor: '#fff',
    padding: 12,
    borderRadius: 10,
    marginBottom: 12,
    boxShadow: '0 1px 3px rgba(0,0,0,0.05)',
  },
  meetingType: {
    fontSize: 13,
    color: '#888',
    marginBottom: 4,
    fontWeight: '600',
  },
  meetingInfo: {
    fontSize: 14,
    color: '#222',
  },
  meetingContent: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  meetingText: {
    flex: 1,
    marginRight: 10,
  },
  meetingAvatar: {
    width: 40,
    height: 40,
    borderRadius: '50%',
    objectFit: 'cover',
  },
  deleteBtn: {
    marginTop: 8,
    padding: '8px 12px',
    backgroundColor: '#e53935',
    color: 'white',
    border: 'none',
    borderRadius: 8,
    fontWeight: 'bold',
    cursor: 'pointer',
  }
};

const modalStyles = {
  backdrop: {
    position: 'fixed',
    top: 0, left: 0, width: '100%', height: '100%',
    backgroundColor: 'rgba(0,0,0,0.5)',
    display: 'flex', alignItems: 'center', justifyContent: 'center',
    zIndex: 9999,
  },
  modal: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 12,
    width: '90%',
    maxWidth: 400,
    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
  },
  title: {
    marginBottom: 16,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    color: '#333',
  },
  inputBlock: {
    marginBottom: 12,
  },
  label: {
    display: 'block',
    marginBottom: 4,
    fontSize: 14,
    color: '#444',
  },
  input: {
    width: '100%',
    padding: 8,
    borderRadius: 8,
    border: '1px solid #ccc',
    fontSize: 14,
  },
  buttonRow: {
    display: 'flex',
    justifyContent: 'space-between',
    marginTop: 16,
  },
  cancelBtn: {
    padding: '8px 16px',
    backgroundColor: '#e53935',
    color: 'white',
    border: 'none',
    borderRadius: 8,
  },
  saveBtn: {
    padding: '8px 16px',
    backgroundColor: '#4caf50',
    color: 'white',
    border: 'none',
    borderRadius: 8,
  },
};

export default Profile;
